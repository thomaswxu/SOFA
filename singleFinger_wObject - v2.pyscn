##################################################################################################
# This scene is for simulating a single FEA, with or without interaction with an additional object
#
#
# Useful Parameters:
#
# DS20: YoungMod = 1.1 MPa
#       100% Mod = 0.338 MPa
# DS30: YoungMod = ~3.4 MPa (should check)
#       100% Mod = 0.5 MPa
# EF30: YoungMod = 125 kPa
#
# Pressure used in Lab: ~0.014 - 0.05 MPa (2-7 psi)
#
# Suction disc size: diam 21 mm, radius 12-13
#
# Note: This file has been updated to work with SOFA version v20.06
#       (implementation differs slightly from SoftRobots examples (from v19.06))

import Sofa
import math
import os
from stlib.components import addOrientedBoxRoi
from fileNames import *

def createScene(rootNode):

        ''' Settings '''
        gravityOn = False
        objectOn = False
        showSL = False
        showProbeIndices = False
        #monitorFinger = False
        monitorObject = True
        fastComp = False   # speeds up simulation by increasing tolerances; CAUTION: may reduce accuracy
        dt = '0.02' # simulation timestep

        rootNode.createObject('VisualStyle', displayFlags=' showBehavior hideVisual showMapping') # showWireframe showMapping')
        if (gravityOn):
                rootNode.findData('gravity').value='0 -9810 0'
        else:
                rootNode.findData('gravity').value='0 0 0'
        rootNode.findData('dt').value=dt
        rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight")

        ''' Required Plugins '''
        rootNode.createObject('RequiredPlugin', name='SofaPython', pluginName='SofaPython') # for PythonScriptController
        rootNode.createObject('RequiredPlugin', name='SoftRobots', pluginName='SoftRobots')
        rootNode.createObject('RequiredPlugin', name='SofaSparseSolver', pluginName='SofaSparseSolver') # for SparseLDLSolver
        rootNode.createObject('RequiredPlugin', name='SofaConstraint', pluginName='SofaConstraint') # for FreeMotionAnimationLoop, GenericConstraintSolver
        rootNode.createObject('RequiredPlugin', name='SofaImplicitOdeSolver', pluginName='SofaImplicitOdeSolver') # for EulerImplicitSolver
        rootNode.createObject('RequiredPlugin', name='SofaLoader', pluginName='SofaLoader') # for MeshVTKLoader
        rootNode.createObject('RequiredPlugin', name='SofaDeformable', pluginName='SofaDeformable') # for RestShapeSpringsForceField
        rootNode.createObject('RequiredPlugin', name='SofaEngine', pluginName='SofaEngine') # for BoxROI
        rootNode.createObject('RequiredPlugin', name='SofaMeshCollision', pluginName='SofaMeshCollision') # for Triangle/Line/Point CollisionModel
        rootNode.createObject('RequiredPlugin', name='SofaSimpleFem', pluginName='SofaSimpleFem') # for TetrehedronFEMForceField
        rootNode.createObject('RequiredPlugin', name='SofaValidation', pluginName='SofaValidation') # for Monitor
        rootNode.createObject('RequiredPlugin', name='MultiThreading', pluginName='MultiThreading')
        rootNode.createObject('RequiredPlugin', name='CUDA computing', pluginName='SofaCUDA') # for speedup

        ''' Python Controller '''
        rootNode.createObject('PythonScriptController', filename='pythonControllers/singleFingerController.py', classname='controller')

        ''' Setup Multithreading '''
        rootNode.createObject('AnimationLoopParallelScheduler', name='mainLoop', threadNumber='0')

        ''' Constraint Solver '''
        if (fastComp):
                constraintTolerance = '0.1'   
                maxIter = '1'
        else:
                constraintTolerance = '1e-6' # previously was 1e-12
                maxIter = '1000' # previously was 10000
                
        rootNode.createObject('FreeMotionAnimationLoop') # will build up the system including constraints
        #rootNode.createObject('DefaultAnimationLoop')
        rootNode.createObject('GenericConstraintSolver', tolerance=constraintTolerance, maxIterations=maxIter, computeConstraintForces='1')
        
        ''' Collision Handling '''
        mu = 0.3
        alarmDist = '1.5'     # mm
        contactDist = '0.75'  # mm
        rootNode.createObject('DefaultPipeline', verbose='0', draw='0') # alternative: CollisionPipeline
        rootNode.createObject('BruteForceDetection', name="N2")
        rootNode.createObject('MinProximityIntersection', name='Proximity', alarmDistance=alarmDist, contactDistance=contactDist)
        #rootNode.createObject('CudaProximityIntersection', alarmDistance=alarmDist, contactDistance=contactDist)
        # alt: rootNode.createObject('LocalMinDistance', name="Proximity", alarmDistance=alarmDist, contactDistance=contactDist, angleCone="0.00")
        rootNode.createObject('DefaultContactManager', response='FrictionContact', responseParams='mu='+str(mu))
        # alternative: rootNode.createObject('CollisionResponse', response="FrictionContact", responseParams='mu='+str(mu))




        ###########
        ''' FEA '''
        ###########

        ''' choose FEA variant (decides mass, file names) '''
        ''' options: parab_4x41x11
                     parab_4x41x20
                     parab_9x41x20
                     rect_4x41x11
                     rect_4x41x20
                     rect_9x41x20
            suffixes: _ChX.X      (modified to have bottom extruded+chamfered layer for strain limiting, X.X = SL layer thickness in mm)
                      _ChX.X_thin (additional _thin means total FEA height is reduced by SL layer thickness, i.e. thinner gap pre SL layer)
                      _ChX.X_tall (additional _tall means top wall of each segment thickened (note: implies _thin also))
                          (note: prob use tall for Ch0.1... unsure if also _thin (prob negligible anyway))
                      _ChX.X_tall_XXdeg (base modified to be angled by XX degrees from vertical)
                      _crs (uses coarser mesh)
                      _SC for 'sanity check' stuff (i.e. no bot chamfer)

            main FEA variants:
                     parab     (parab_4x41x11_Ch0.1_tall_crs)
                     parab_ang (parab_4x41x11_Ch0.1_tall_15deg_crs)
                     rect      (parab_4x41x11_Ch0.1_tall_crs)
                     rect_ang  (parab_4x41x11_Ch0.1_tall_15deg_crs)
        '''
        fea_variant = 'rect_ang_Ch0.2' #'parab_ang_Ch0.2'
        angledVariant = True  # triggers angled boxROI for SL layer, base constraint
        collisFingerOn = True

        ''' initialize FEA node '''
        CG_iter = '25'
        CG_tol = '1e-12'
        CG_thresh = '1e-12'

        finger = rootNode.createChild('finger') # note: this name referenced in python controller (case sensitive)
        finger.createObject('EulerImplicit', name='odeSolver', rayleighStiffness='0.1', rayleighMass='0.1')     # time integration
        finger.createObject('SparseLDLSolver', name='directSolver')     # matrix solver, to compute node positions/velocities
        #finger.createObject('CGLinearSolver', iterations=CG_iter, tolerance=CG_tol, threshold=CG_thresh)

        ''' general parameters '''
        feaPoisson = 0.3
        feaPoisson_stiff = 0.3   # "stiff": used for simulated stiffer layer
        feaYoungMod_stiff = 2000 # MPa (paper: ~2 GPa)
        feaYoungMod = 3.4        # MPa (based on DS30 value)
        radOffset = 13           # offset for FEA base position, based on suction disc radius (mm)


        ''' get mass, file names based on FEA variant chosen '''
        feaTotMass = fea_variant_mass(fea_variant) # kg (*increasing mass doesn't seem to help with pressure explosion)
        feaVertMass = 0.0000001 # kg (alternative to total mass; currently unused)
        folder_path = 'C:/Users/ThomasX/Desktop/SOFA stuff/object files/Better Meshes/'
        feaSTL_path = folder_path + fea_variant_STL(fea_variant)
        feaVTK_path = folder_path + fea_variant_VTK(fea_variant)
        cavitySTL_path = folder_path + fea_variant_airSTL(fea_variant)

        ''' rotate base by certain angle (optional) '''
        if (angledVariant):
                fingerTrans = '0 0 0'
                fingerRot = '0 0 -15'
        else: 
                fingerTrans = '0 0 0'
                fingerRot = '0 0 0'

        ''' create volumetric mesh '''
        finger.createObject('MeshVTKLoader', name='loader', filename=feaVTK_path, translation=fingerTrans, rotation=fingerRot)
        #finger.createObject('Mesh', src='@loader', name='container')
        finger.createObject('TetrahedronSetTopologyContainer', src='@loader', name='container')
        finger.createObject('TetrahedronSetTopologyModifier')
        #finger.createObject('TetrahedronSetTopologyAlgorithms', template='Vec3d') # deprecated v20.12
        finger.createObject('TetrahedronSetGeometryAlgorithms', template='Vec3d')
        finger.createObject('MechanicalObject', name='tetras', template='Vec3d', showObject='true', showObjectScale='1')    # stores mesh DOFs (position of nodes)
        
        ''' simulate material and internal forces '''
        finger.createObject('UniformMass', totalMass=str(feaTotMass)) # totalMass=str(feaTotMass) vs. vertexMass=str(feaVertMass)
        finger.createObject('TetrahedronFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio=str(feaPoisson),  youngModulus=str(feaYoungMod), drawAsEdges='true')
        
        
        ''' add (simulated) stiffer layer to FEA using boxROI '''
        #   (note: AKA "model sub topology")
        #   box: 'x_min y_min z_min x_max y_max z_max'
        #   orientedBox: 'botR_point, topR_point, topL_point, z_width' (assuming in botR quadrant of graph)
        stiffLayer_boxROI_coords = stiffLayerCoords(fea_variant)
        if (angledVariant):
                finger.createObject('BoxROI', name='stiffLayer_boxROI', orientedBox=stiffLayer_boxROI_coords, drawBoxes='true')    
        else:
                finger.createObject('BoxROI', name='stiffLayer_boxROI', box=stiffLayer_boxROI_coords, drawBoxes='true')    
        stiffLayer = finger.createChild('stiffLayer')
        
        # additional boxROI for testing purposes
        # finger.createObject('BoxROI', name='test_boxROI', orientedBox='50 -13.9 5 50 -12.9 5 0 0.5 5 15', drawBoxes='true')    

        # use triangle version to visualize which nodes are affected (need tetrahedron version for actual effect)
        if (showSL):
                stiffLayer.createObject('TetrahedronSetTopologyContainer', position='@loader.position', triangles="@stiffLayer_boxROI.trianglesInROI", name='container')
                stiffLayer.createObject('TriangleFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio=str(feaPoisson_stiff),  youngModulus=str(feaYoungMod_stiff-feaYoungMod))
        else:
                stiffLayer.createObject('TetrahedronSetTopologyContainer', position='@loader.position', tetrahedra="@stiffLayer_boxROI.tetrahedraInROI", name='container')
                stiffLayer.createObject('TetrahedronSetTopologyModifier')
                stiffLayer.createObject('TetrahedronSetGeometryAlgorithms', template='Vec3d')
                stiffLayer.createObject('TetrahedronFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio=str(feaPoisson_stiff),  youngModulus=str(feaYoungMod_stiff-feaYoungMod))

                
        ''' constrain FEA base '''
        baseConstraint_coords = baseConstraint(fea_variant)
        baseConstraint_stiffness = '1e12' # little effect? 
        baseConstraint_angStiffness = '1e12'
        if (angledVariant):
                finger.createObject('BoxROI', name='base_boxROI', orientedBox=baseConstraint_coords, drawBoxes='true')   
        else:
                finger.createObject('BoxROI', name='base_boxROI', box=baseConstraint_coords, drawBoxes='true')   
        finger.createObject('RestShapeSpringsForceField', points='@base_boxROI.indices', stiffness=baseConstraint_stiffness, angularStiffness=baseConstraint_angStiffness)


        finger.createObject('LinearSolverConstraintCorrection', solverName='directSolver') # accounts for cavity constraint; linked to SparseLDLSolver above via solverName
        # alts:
        #finger.createObject('UncoupledConstraintCorrection')#, solverName='directSolver')
        #finger.createObject('PrecomputedConstraintCorrection', recompute='false') # precomputes for faster simulation, but may be inaccurate


        ''' get cavity placement (trans, rot) based on FEA variant chosen '''
        cavity_trans = fea_variant_cavity_placement(fea_variant)[0]
        cavity_rot = fea_variant_cavity_placement(fea_variant)[1]

        ''' create cavity node '''
        cavity = finger.createChild('cavity')
        cavity.createObject('MeshSTLLoader', name='cavityLoader', filename=cavitySTL_path, translation=cavity_trans, rotation=cavity_rot) # load SURFACE mesh
        cavity.createObject('Mesh', src='@cavityLoader', name='cavityMesh')
        cavity.createObject('MechanicalObject', name='cavity')  # stores DOFs

        ''' add pressure using cavity '''
        cavity.createObject('SurfacePressureConstraint', name="SurfacePressureConstraint", template='Vec3d', value="0.0001", triangles='@cavityMesh.triangles', valueType="pressure")
        cavity.createObject('BarycentricMapping', name='mapping', mapForces='false', mapMasses='false') # maps cavity mesh deformation to finger mesh

        ''' collision '''
        # note: uses SURFACE mesh (i.e. STL)
        # (surface mesh nodes don't need to match volumetric mesh nodes; linked via mapping)
        if (collisFingerOn):
                collisFinger_trans = fingerTrans
                collisFinger_rot = fingerRot

                collisionFinger = finger.createChild('collisionFinger')
                collisionFinger.createObject('MeshSTLLoader', name='loader', filename=feaSTL_path, translation=collisFinger_trans, rotation=collisFinger_rot)
                collisionFinger.createObject('Mesh', src='@loader', name='collisFinger_Mesh')
                collisionFinger.createObject('MechanicalObject', name='collisFinger_MechO')

                collisionFinger.createObject('Triangle', selfCollision='0')     # will prob crash if selfCollision = '1'
                collisionFinger.createObject('Line', selfCollision='0')
                collisionFinger.createObject('Point', selfCollision='0')
                collisionFinger.createObject('BarycentricMapping') #, mapForces='false', mapMasses='false')



        ##############
        ''' Object '''
        ##############

        if (objectOn):

                ''' pick object variant '''
                ### options: cylinder   (cyl_dXX)
                ###          hemisphere (hemi_dXX)
                ###          (d = diameter in mm, value = XX)
                ### suffixes: _cut (only portion of object used)
                obj_variant = 'cyl_d100';
                
                ''' general parameters '''
                objMass = 0.1 # kg (Note: may not matter when gravity off)
                objYoungMod = 50000 # MPa (main options: 0.005, 0.05, 0.5) (*Rigid test: 50 GPa)
                objPoisson = 0.3

                ''' get object file paths '''
                obj_folder_path = folder_path + 'new objects/'
                objVTK_path = obj_folder_path + obj_variant_VTK(obj_variant) 
                objSTL_path = obj_folder_path + obj_variant_STL(obj_variant) 

                ''' define object position based on variant '''
                objTrans = obj_variant_position(obj_variant)[0] # mm
                objRot = obj_variant_position(obj_variant)[1]   # deg

                ''' initialize node '''
                obj = rootNode.createChild('OBJECT')
                obj.createObject('EulerImplicit', name='odeSolver', rayleighStiffness='0.1', rayleighMass='0.1')
                obj.createObject('SparseLDLSolver', name='directSolver')
                #obj.createObject('CGLinearSolver', tolerance=CG_tol, iterations=CG_iter, threshold=CG_thresh)

                ''' main object node '''
                obj.createObject('MeshVTKLoader', name='loader', filename=objVTK_path, translation=objTrans, rotation=objRot)
                obj.createObject('TetrahedronSetTopologyContainer', src='@loader', name='container')
                obj.createObject('TetrahedronSetTopologyModifier')
                #obj.createObject('TetrahedronSetTopologyAlgorithms', template='Vec3d') # deprecated v20.12
                obj.createObject('TetrahedronSetGeometryAlgorithms')

                obj.createObject('MechanicalObject', name='DOFS', template='Vec3d')
                obj.createObject('UniformMass', totalMass=str(objMass))

                obj.createObject('TetrahedronFEMForceField', name="FEM", method='large', poissonRatio=str(objPoisson), youngModulus=str(objYoungMod), computeGlobalMatrix='0', updateStiffnessMatrix='0')

                obj.createObject('LinearSolverConstraintCorrection', solverName='directSolver')
                # alts:
                #obj.createObject('PrecomputedConstraintCorrection', recompute='false')
                #obj.createObject('UncoupledConstraintCorrection')
                        
                # collision
                objCollis = obj.createChild('objCollis')
                objCollis.createObject('MeshSTLLoader', name='loader', filename=objSTL_path, translation=objTrans, rotation=objRot)
                objCollis.createObject('Mesh', src='@loader')
                objCollis.createObject('MechanicalObject', name='collisMech') #, template='Vec3d')
                objCollis.createObject('TriangleCollisionModel', selfCollision='0') #, template='CudaVec3f')
                #objCollis.createObject('LineModel', selfCollision='0') #, template='CudaVec3f')
                #objCollis.createObject('PointModel', selfCollision='0')
                objCollis.createObject('BarycentricMapping')


                ''' constrain object base (based on variant) '''
                obj_constraint_boxROI = obj_constraint(obj_variant)
                obj.createObject('BoxROI', name='base_boxROI', box=obj_constraint_boxROI, drawBoxes='true')   
                obj.createObject('RestShapeSpringsForceField', points='@base_boxROI.indices', stiffness='1e12', angularStiffness='1e12')
                # additional base constraint on side
                obj_addConstraint_boxROI = obj_addConstraint(obj_variant)
                obj.createObject('BoxROI', name='base_boxROI2', box=obj_addConstraint_boxROI, drawBoxes='true')   
                obj.createObject('RestShapeSpringsForceField', name='RSSFF', points='@base_boxROI2.indices', stiffness='1e12', angularStiffness='1e12')

                ''' object monitor '''
                obj_indices = obj_probeIndices(obj_variant)
                if (showProbeIndices): obj.createObject('FixedConstraint', indices=obj_indices)
                if (monitorObject):
                    obj.createObject('Monitor', template='Vec3d', name='objMonitor', listening='1', indices=obj_indices, showForces='1', ExportForces='1', showMinThreshold='0.01', sizeFactor='0.1')

                # data exchange for multithreading
                kwargs = {'name':'exchangeData1', 'template':'vector<float>', 'from': '@finger/tetras.position', 'to': '@OBJECT/DOFS.position'}
                rootNode.createObject('DataExchange', **kwargs)
                